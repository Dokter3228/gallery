Index: client/src/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import * as React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\nimport Main from \"./App/Main\";\nimport { store } from \"./App/store\";\nimport { Provider } from \"react-redux\";\nimport { ApiProvider } from \"@reduxjs/toolkit/dist/query/react\";\nimport { extendedImagesApi } from \"./features/api/imagesApi\";\nimport \"./index.scss\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\")!);\nroot.render(\n  <React.StrictMode>\n    <ApiProvider api={extendedImagesApi}>\n      <Provider store={store}>\n        <Main />\n      </Provider>\n    </ApiProvider>\n  </React.StrictMode>\n);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/index.tsx b/client/src/index.tsx
--- a/client/src/index.tsx	(revision 76fee8448268c634078baa5bb9e07383b1384607)
+++ b/client/src/index.tsx	(date 1677173846279)
@@ -3,17 +3,13 @@
 import Main from "./App/Main";
 import { store } from "./App/store";
 import { Provider } from "react-redux";
-import { ApiProvider } from "@reduxjs/toolkit/dist/query/react";
-import { extendedImagesApi } from "./features/api/imagesApi";
 import "./index.scss";
 
 const root = ReactDOM.createRoot(document.getElementById("root")!);
 root.render(
   <React.StrictMode>
-    <ApiProvider api={extendedImagesApi}>
-      <Provider store={store}>
-        <Main />
-      </Provider>
-    </ApiProvider>
+    <Provider store={store}>
+      <Main />
+    </Provider>
   </React.StrictMode>
 );
Index: client/src/features/api/usersApi.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { usersApiTagged } from \"./emptySplitApi\";\n\nexport const extendedUsersApi = usersApiTagged.injectEndpoints({\n  endpoints: (builder) => ({\n    login: builder.mutation({\n      query: (body) => ({\n        url: \"/users/login\",\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n      }),\n    }),\n    checkUser: builder.mutation({\n      query: (body) => ({\n        url: \"/users/checkAuth\",\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n      }),\n    }),\n    logout: builder.mutation({\n      query: (body) => ({\n        url: \"/users/logout\",\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n      }),\n    }),\n    signup: builder.mutation({\n      query: (body) => ({\n        url: \"/users/registration\",\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n      }),\n    }),\n    checkCookie: builder.mutation({\n      query: (body) => ({\n        url: \"/users/checkCookie\",\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n      }),\n    }),\n    currentUser: builder.query({\n      query: (body) => ({\n        url: \"/users/current-user\",\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n      }),\n    }),\n  }),\n  overrideExisting: false,\n});\n\nexport const {\n  useLoginMutation,\n  useSignupMutation,\n  useLogoutMutation,\n  useCheckUserMutation,\n  useCheckCookieMutation,\n  useCurrentUserQuery,\n} = extendedUsersApi;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/features/api/usersApi.ts b/client/src/features/api/usersApi.ts
--- a/client/src/features/api/usersApi.ts	(revision 76fee8448268c634078baa5bb9e07383b1384607)
+++ b/client/src/features/api/usersApi.ts	(date 1677173846259)
@@ -12,7 +12,7 @@
     }),
     checkUser: builder.mutation({
       query: (body) => ({
-        url: "/users/checkAuth",
+        url: "/users/auth",
         method: "POST",
         body,
         credentials: "include",
@@ -36,7 +36,7 @@
     }),
     checkCookie: builder.mutation({
       query: (body) => ({
-        url: "/users/checkCookie",
+        url: "/users/auth/cookie",
         method: "POST",
         body,
         credentials: "include",
@@ -44,7 +44,7 @@
     }),
     currentUser: builder.query({
       query: (body) => ({
-        url: "/users/current-user",
+        url: "/users/user",
         method: "POST",
         body,
         credentials: "include",
Index: client/src/features/api/imagesApi.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { imagesApiTagged } from \"./emptySplitApi\";\nimport { setAllImages } from \"../images/imagesSlice\";\nimport {Image} from \"../images/imagesSlice\";\nexport const extendedImagesApi = imagesApiTagged.injectEndpoints({\n  endpoints: (builder) => ({\n    getImages: builder.query<Image[], void>({\n      keepUnusedDataFor: 0,\n      query: () => \"/images/\",\n      async onQueryStarted(id, { dispatch, queryFulfilled }) {\n        try {\n          const { data } = await queryFulfilled;\n          dispatch(setAllImages(data));\n        } catch (err) {\n          dispatch(setAllImages([]));\n        }\n      },\n      providesTags: (result, error, arg) => result\n          ? [\n              ...result.map(({ uuid }) => ({ type: \"Images\" as const, uuid })),\n              \"Images\",\n            ]\n          : [\"Images\"]\n    }),\n    addImage: builder.mutation({\n      query: (body) => ({\n        url: \"/images/image/1\",\n        method: \"POST\",\n        body,\n        credentials: \"include\",\n      }),\n      async onQueryStarted(id, { dispatch, queryFulfilled }) {\n        try {\n          const { data } = await queryFulfilled;\n          dispatch(setAllImages(data));\n        } catch (err) {\n          dispatch(setAllImages([]));\n        }\n      },\n      invalidatesTags: [\"Images\"],\n    }),\n    setImageComment: builder.mutation({\n      query: (body) => ({\n        url: \"/images/image/1\",\n        method: \"PUT\",\n        body,\n        credentials: \"include\",\n      }),\n      invalidatesTags: [\"Images\"],\n    }),\n  }),\n  overrideExisting: false,\n});\n\nexport const {\n  useGetImagesQuery,\n  useAddImageMutation,\n  useSetImageCommentMutation,\n} = extendedImagesApi;\n\n// import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n// export const imagesApi = createApi({\n//     reducerPath: 'getImages',\n//     baseQuery: fetchBaseQuery({\n//         baseUrl: 'http://localhost:17548/',\n//     }),\n//     tagTypes: ['Images'],\n//     endpoints: (builder) => ({\n//         getImages: builder.query({\n//             query: () => '/images/allImages',\n//             providesTags: (result, error, arg) =>\n//                 result\n//                     // @ts-ignore\n//                     ? [...result.map(({ uuid }) => ({ type: 'Images' as const, uuid })), 'Images']\n//                     : ['Images'],\n//         }),\n//         addImage: builder.mutation({\n//             query: (body) => ({\n//                 url: \"/images/image/1\",\n//                 method: \"POST\",\n//                 body,\n//             }),\n//             invalidatesTags: [\"Images\"]\n//         })\n//     }),\n// })\n\n// export const { useGetImagesQuery, useAddImageMutation } = imagesApi\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/features/api/imagesApi.ts b/client/src/features/api/imagesApi.ts
--- a/client/src/features/api/imagesApi.ts	(revision 76fee8448268c634078baa5bb9e07383b1384607)
+++ b/client/src/features/api/imagesApi.ts	(date 1677173846255)
@@ -1,6 +1,6 @@
 import { imagesApiTagged } from "./emptySplitApi";
 import { setAllImages } from "../images/imagesSlice";
-import {Image} from "../images/imagesSlice";
+import { Image } from "../images/imagesSlice";
 export const extendedImagesApi = imagesApiTagged.injectEndpoints({
   endpoints: (builder) => ({
     getImages: builder.query<Image[], void>({
@@ -14,12 +14,13 @@
           dispatch(setAllImages([]));
         }
       },
-      providesTags: (result, error, arg) => result
+      providesTags: (result, error, arg) =>
+        result
           ? [
               ...result.map(({ uuid }) => ({ type: "Images" as const, uuid })),
               "Images",
             ]
-          : ["Images"]
+          : ["Images"],
     }),
     addImage: builder.mutation({
       query: (body) => ({
Index: server/src/controllers/imageController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Image from \"../models/image\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport path from \"path\";\nimport { Comment } from \"../models/comments\";\nimport User from \"../models/user\";\nclass imageController {\n  async setImage(req, res) {\n    try {\n      // const token = req.headers?.cookie.split('set-cookie=').join('');\n      // const {login = \"somebody\"} = jwt.verify(token, process.env.JWT_SECRET_KEY);\n      // FIXME looks wierd\n      const login = req.body.login;\n      const comment = req.body.comment;\n      // FIXME refactor to nanoid\n      const uuid = uuidv4();\n      let image;\n      let uploadPath;\n      if (!req.files || Object.keys(req.files).length === 0) {\n        return res.status(400).send(\"No files were uploaded.\");\n      }\n      image = req.files.image;\n      const fileExtension = image.name.split(\".\")[1];\n      // FIXME looks wierd\n      uploadPath =\n        path.resolve(__dirname, \"..\", \"..\", \"public/images\") +\n        \"/\" +\n        uuid +\n        \".\" +\n        fileExtension;\n      const date = new Date().toLocaleDateString();\n      const imageDb = new Image({\n        author: login,\n        uuid: uuid,\n        creationDate: date,\n        comments: [],\n        src: \"http://localhost:17548/images/\" + uuid + \".\" + fileExtension,\n      });\n      const user = await User.findOne({login})\n      // @ts-ignore\n      user.images.push(imageDb)\n      await user.save()\n      const imageToSave = await imageDb.save();\n      image.mv(uploadPath, function (err) {\n        if (err) return res.status(500).send(err);\n        res.status(200).send(imageToSave);\n      });\n    } catch (e) {\n      if (e.name === \"TokenExpiredError\") {\n        res.status(400).send(\"Your jwt expired, login again\");\n      } else {\n        res.status(400).send(e);\n      }\n    }\n  }\n\n  // FIXME resolve author, comments, dates\n  async getImageMeta(req, res) {\n    const uuid = req.params.id;\n    const image = await Image.findOne({ uuid: uuid });\n    res.status(200).json(image);\n  }\n\n  async changeImageMeta(req, res) {\n    const { uuid, comment, author } = req.body;\n    const image = await Image.findOne({ uuid: uuid });\n    const user = await User.findOne({login: author})\n    const commentDb = new Comment({\n      author,\n      text: comment,\n    });\n    await commentDb.save();\n    // @ts-ignore\n    await user.comments.push(commentDb)\n    // @ts-ignore\n    await user.save()\n    // @ts-ignore\n    await image.comments.push(commentDb);\n    await image.save();\n    res.status(200).json(image);\n  }\n\n  async getAllImages(req, res) {\n    const imagesData = [];\n    const imagesDb = await Image.find();\n    for (const img of imagesDb) {\n      const coms = [];\n      for (const imgCom of img.comments) {\n        const com = await Comment.findById(imgCom);\n        coms.push({\n          author: com.author,\n          text: com.text,\n        });\n      }\n      const imgData = {\n        uuid: img.uuid,\n        author: img.author,\n        comments: coms,\n        src: img.src,\n        creationDate: img.creationDate,\n      };\n      imagesData.push(imgData);\n    }\n    res.status(200).json(imagesData);\n  }\n}\n\nexport default new imageController();\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/controllers/imageController.ts b/server/src/controllers/imageController.ts
--- a/server/src/controllers/imageController.ts	(revision 76fee8448268c634078baa5bb9e07383b1384607)
+++ b/server/src/controllers/imageController.ts	(date 1677173846287)
@@ -10,7 +10,6 @@
       // const {login = "somebody"} = jwt.verify(token, process.env.JWT_SECRET_KEY);
       // FIXME looks wierd
       const login = req.body.login;
-      const comment = req.body.comment;
       // FIXME refactor to nanoid
       const uuid = uuidv4();
       let image;
@@ -35,10 +34,10 @@
         comments: [],
         src: "http://localhost:17548/images/" + uuid + "." + fileExtension,
       });
-      const user = await User.findOne({login})
+      const user = await User.findOne({ login });
       // @ts-ignore
-      user.images.push(imageDb)
-      await user.save()
+      user.images.push(imageDb);
+      await user.save();
       const imageToSave = await imageDb.save();
       image.mv(uploadPath, function (err) {
         if (err) return res.status(500).send(err);
@@ -63,16 +62,16 @@
   async changeImageMeta(req, res) {
     const { uuid, comment, author } = req.body;
     const image = await Image.findOne({ uuid: uuid });
-    const user = await User.findOne({login: author})
+    const user = await User.findOne({ login: author });
     const commentDb = new Comment({
       author,
       text: comment,
     });
     await commentDb.save();
     // @ts-ignore
-    await user.comments.push(commentDb)
+    await user.comments.push(commentDb);
     // @ts-ignore
-    await user.save()
+    await user.save();
     // @ts-ignore
     await image.comments.push(commentDb);
     await image.save();
Index: server/src/routes/userRoutes.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import express from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport userController from \"../controllers/userController\";\nimport cookieController from \"../controllers/cookieController\";\nconst userRouter = express.Router();\n\nuserRouter.use(cookieParser(\"secret key\"));\n\n// FIXME why this looks wired in rest api and what is the correct endpoint path\nuserRouter.post(\"/registration\", userController.createNewUser);\nuserRouter.post(\"/login\", userController.login);\nuserRouter.post(\"/logout\", userController.logout);\nuserRouter.post(\"/current-user\", userController.currentUser);\n// FIXME patch user-meta/:id name/avatar -> user\n// FIXME why this looks wired in rest api and what is the correct endpoint path\nuserRouter.post(\"/checkAuth\", cookieController.checkAuth);\nuserRouter.post(\"/checkCookie\", cookieController.authCheckCookie);\n// FIXME add prettier\nexport { userRouter };\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/routes/userRoutes.ts b/server/src/routes/userRoutes.ts
--- a/server/src/routes/userRoutes.ts	(revision 76fee8448268c634078baa5bb9e07383b1384607)
+++ b/server/src/routes/userRoutes.ts	(date 1677173846299)
@@ -10,10 +10,10 @@
 userRouter.post("/registration", userController.createNewUser);
 userRouter.post("/login", userController.login);
 userRouter.post("/logout", userController.logout);
-userRouter.post("/current-user", userController.currentUser);
+userRouter.post("/user", userController.currentUser);
 // FIXME patch user-meta/:id name/avatar -> user
 // FIXME why this looks wired in rest api and what is the correct endpoint path
-userRouter.post("/checkAuth", cookieController.checkAuth);
-userRouter.post("/checkCookie", cookieController.authCheckCookie);
+userRouter.post("/auth", cookieController.checkAuth);
+userRouter.post("/auth/cookie", cookieController.authCheckCookie);
 // FIXME add prettier
 export { userRouter };
Index: client/src/features/api/emptySplitApi.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Or from '@reduxjs/toolkit/query' if not using the auto-generated hooks\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\n// initialize an empty api service that we'll inject endpoints into later as needed\nexport const emptySplitApi = createApi({\n  baseQuery: fetchBaseQuery(\n      { baseUrl: \"http://localhost:17548/\" }),\n  endpoints: () => ({}),\n});\n\nexport const imagesApiTagged = emptySplitApi.enhanceEndpoints({\n  addTagTypes: [\"Images\"],\n});\n\nexport const usersApiTagged = emptySplitApi.enhanceEndpoints({\n  addTagTypes: [\"Users\"],\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/features/api/emptySplitApi.ts b/client/src/features/api/emptySplitApi.ts
--- a/client/src/features/api/emptySplitApi.ts	(revision 76fee8448268c634078baa5bb9e07383b1384607)
+++ b/client/src/features/api/emptySplitApi.ts	(date 1677173846243)
@@ -3,8 +3,7 @@
 
 // initialize an empty api service that we'll inject endpoints into later as needed
 export const emptySplitApi = createApi({
-  baseQuery: fetchBaseQuery(
-      { baseUrl: "http://localhost:17548/" }),
+  baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:17548/" }),
   endpoints: () => ({}),
 });
 
Index: client/src/features/images/imagesSlice.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\n\nexport type Image = {\n  author: string;\n  comments: [Comment]\n  creationDate: string;\n  src: string;\n  uuid: string;\n};\n\nexport type Comment = {\n  author: string,\n  text: string\n}\n\nconst imagesAdapter = createEntityAdapter<Image>({\n  selectId: (image) => image.uuid,\n});\n\nconst imagesSlice = createSlice({\n  name: \"Images\",\n  initialState: imagesAdapter.getInitialState(),\n  reducers: {\n    setAllImages: imagesAdapter.setAll,\n    addImage: imagesAdapter.addOne,\n    addComment: imagesAdapter.upsertOne,\n  },\n});\n\nexport const { setAllImages, addImage, addComment } = imagesSlice.actions;\nexport default imagesSlice.reducer;\n\n// import { createEntityAdapter, createSlice, EntityId } from \"@reduxjs/toolkit\";\n// import {RootState} from \"../../App/store\";\n// export interface ImagesState {\n//   imagesArray: string[];\n// }\n//\n// export type Image = {\n//   author: string;\n//   uuid: EntityId;\n//   src: string;\n//   // comments : array of uniq comments from entityProvider of Comment\n//   comments: EntityId[],\n//   creationDate: string\n// };\n//\n// export type Comment = {\n//   author: string;\n//   text: string;\n//   _id: EntityId;\n// };\n//\n// export const commentEntityAdapter = createEntityAdapter<Comment>({\n//   selectId: (comment) => comment._id,\n// });\n//\n// export const imageEntityAdapter = createEntityAdapter<Image>({\n//   selectId: (image) => image.uuid,\n// });\n//\n//\n// export const imagesSlice = createSlice({\n//   name: \"images\",\n//   initialState,\n//   reducers: {\n// // @ts-ignore\n//     addImage: imageEntityAdapter.addOne,\n//     setImages(state, action) {\n//       // @ts-ignore\n//       imageEntityAdapter.setAll(state, action.payload.imagesArray)\n//     }\n//   },\n// });\n//\n// export const imagesSelectors = imageEntityAdapter.getSelectors<RootState>(\n// // @ts-ignore\n//     state => state.imagesArray\n// )\n// export const { addImage } = imagesSlice.actions;\n//\n// export default imagesSlice.reducer;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/features/images/imagesSlice.ts b/client/src/features/images/imagesSlice.ts
--- a/client/src/features/images/imagesSlice.ts	(revision 76fee8448268c634078baa5bb9e07383b1384607)
+++ b/client/src/features/images/imagesSlice.ts	(date 1677173846267)
@@ -2,16 +2,16 @@
 
 export type Image = {
   author: string;
-  comments: [Comment]
+  comments: [Comment];
   creationDate: string;
   src: string;
   uuid: string;
 };
 
 export type Comment = {
-  author: string,
-  text: string
-}
+  author: string;
+  text: string;
+};
 
 const imagesAdapter = createEntityAdapter<Image>({
   selectId: (image) => image.uuid,
Index: client/src/components/App/App.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCheckUserMutation } from \"../../features/api/usersApi\";\nimport {\n  useAddImageMutation,\n  useGetImagesQuery, useSetImageCommentMutation,\n} from \"../../features/api/imagesApi\";\nimport {\n  useCheckCookieMutation,\n  useCurrentUserQuery,\n} from \"../../features/api/usersApi\";\nimport Logout from \"../Logout/Logout\";\nimport { useNavigate } from \"react-router-dom\";\nimport ImagePlate from \"../UI/imagePlate/ImagePlate\";\nimport {useAppSelector} from \"../../App/store\";\nimport {addImage, addComment} from \"../../features/images/imagesSlice\";\nimport {useAppDispatch} from \"../../hooks\";\n\n\n\nconst App = () => {\n  // @ts-ignore\n  const imageSelector = useAppSelector((state) => state.images.entities)\n  const navigate = useNavigate();\n  const [checkCookie] = useCheckCookieMutation();\n  const { data: { author } = {} } = useCurrentUserQuery(\"\");\n  const [blobState, setBlobState] = useState([])\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    const redirectIfNoCookie = async () => {\n      const res = await checkCookie(\"\");\n      // @ts-ignore\n      if (res?.error) {\n        navigate(\"/login\");\n      }\n    };\n    redirectIfNoCookie();\n  }, []);\n\n  const [selectedFile, setSelectedFile] = useState<File | string| Blob>(\"\");\n  const { data: imagesH, isLoading } = useGetImagesQuery();\n  const [addImageHere] = useAddImageMutation();\n  const [checkIfUserExists] = useCheckUserMutation();\n  const [setImageComment] = useSetImageCommentMutation()\n  const upload = async (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    // @ts-ignore\n    const { data } = await checkIfUserExists();\n    let formData = new FormData();\n    formData.append(\"image\", selectedFile);\n    formData.append(\"login\", data.login);\n    // @ts-ignore\n    // const href = URL.createObjectURL(selectedFile)\n    // setBlobState(href)\n    addImageHere(formData);\n  };\n\n  if (isLoading) {\n    return <h1>Wait pls!</h1>;\n  }\n\n  const handleImageSending = async (e:any) => {\n    e.preventDefault()\n    for(let myBlob of blobState) {\n      let blob = await fetch(myBlob).then(r => r.blob());\n      const myFile = new File([blob], 'image.jpeg', {\n        type: \"image/file\"\n      });\n      // @ts-ignore\n      const { data } = await checkIfUserExists();\n      let formData = new FormData();\n      // @ts-ignore\n      formData.append(\"image\", myFile);\n      formData.append(\"login\", data.login);\n      addImageHere(formData);\n    }\n    //\n    // for(let entity of Object.values(imageSelector)) {\n    //   if(!entity) return\n    //     for(let comment of entity.comments) {\n    //         if(!comment) return\n    //         setImageComment({\n    //                 comment: comment.text,\n    //                 author: comment.author,\n    //                 uuid: entity.uuid\n    //         })\n    //     }\n    // }\n\n    setBlobState([])\n  }\n\n  return (\n    <div className=\"bg-gray-900 text-white px-6\">\n      <h1 className=\"text-3xl text-center py-10 \">Gallery main page</h1>\n      <h1 className=\"text-3xl text-center py-10 text-green-600\" >Uploaded images</h1>\n      <div className=\"mx-80 flex justify-center items-center gap-x-10\">\n        {blobState && blobState.map( blob => {\n          return <img className=\"rounded-2xl w-60 h-22\" src={blob} alt=\"asdfas\"/>\n        } )}\n      </div>\n      <form className=\"text-center my-6 mb-10 flex items-center justify-center gap-20\">\n        <input\n          type=\"file\"\n          name=\"screenshot\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            if (!e.target.files) return;\n            setSelectedFile(e.target.files[0]);\n            const href = URL.createObjectURL(e.target.files[0])\n            // @ts-ignore\n            setBlobState(prev => [...prev, href])\n            // @ts-ignore\n            // dispatch(\n            //     addImage( {\n            //         author: \"dfasdfa\",\n            //         comments: [\n            //           {\n            //             author: \"asdfasdfa\",\n            //             text: \"uploaded\"\n            //           }\n            //         ],\n            //         creationDate: \"fasdfas\",\n            //         src: href,\n            //         uuid: \"dfasoudfhliawuehflaiw\",\n            //     })\n            //   );\n          }}\n        />\n        {/*<button onClick={(e) => upload(e)}>Upload the image</button>*/}\n        <button className=\"bg-green-500 text-black rounded-md p-1.5 font-semibold\" onClick={handleImageSending}>\n          Save Changes\n        </button>\n      </form>\n      <div className=\"flex flex-wrap gap-20 items-center justify-center my-20\">\n        {!isLoading ? (\n          Object.values(imageSelector).map((img) => {\n            return (\n              // @ts-ignore\n              <ImagePlate key={img.uuid} img={img} currentUser={author} />\n            );\n          })\n        ) : (\n          <h1>No images now!</h1>\n        )}\n        {Object.values(imageSelector).length === 0 && (\n          <h1 className=\"text-2xl text-red-300\">\n            There's no images yet! Upload\n          </h1>\n        )}\n      </div>\n      <Logout />\n    </div>\n  );\n};\n\nexport default App;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/components/App/App.tsx b/client/src/components/App/App.tsx
--- a/client/src/components/App/App.tsx	(revision 76fee8448268c634078baa5bb9e07383b1384607)
+++ b/client/src/components/App/App.tsx	(date 1677173846227)
@@ -3,7 +3,8 @@
 import { useCheckUserMutation } from "../../features/api/usersApi";
 import {
   useAddImageMutation,
-  useGetImagesQuery, useSetImageCommentMutation,
+  useGetImagesQuery,
+  useSetImageCommentMutation,
 } from "../../features/api/imagesApi";
 import {
   useCheckCookieMutation,
@@ -12,20 +13,18 @@
 import Logout from "../Logout/Logout";
 import { useNavigate } from "react-router-dom";
 import ImagePlate from "../UI/imagePlate/ImagePlate";
-import {useAppSelector} from "../../App/store";
-import {addImage, addComment} from "../../features/images/imagesSlice";
-import {useAppDispatch} from "../../hooks";
+import { useAppSelector } from "../../App/store";
+import { addImage, addComment } from "../../features/images/imagesSlice";
+import { useAppDispatch } from "../../hooks";
 
-
-
 const App = () => {
   // @ts-ignore
-  const imageSelector = useAppSelector((state) => state.images.entities)
+  const imageSelector = useAppSelector((state) => state.images.entities);
   const navigate = useNavigate();
   const [checkCookie] = useCheckCookieMutation();
   const { data: { author } = {} } = useCurrentUserQuery("");
-  const [blobState, setBlobState] = useState([])
-  const dispatch = useAppDispatch()
+  const [blobState, setBlobState] = useState([]);
+  const dispatch = useAppDispatch();
   useEffect(() => {
     const redirectIfNoCookie = async () => {
       const res = await checkCookie("");
@@ -37,11 +36,11 @@
     redirectIfNoCookie();
   }, []);
 
-  const [selectedFile, setSelectedFile] = useState<File | string| Blob>("");
+  const [selectedFile, setSelectedFile] = useState<File | string | Blob>("");
   const { data: imagesH, isLoading } = useGetImagesQuery();
   const [addImageHere] = useAddImageMutation();
   const [checkIfUserExists] = useCheckUserMutation();
-  const [setImageComment] = useSetImageCommentMutation()
+  const [setImageComment] = useSetImageCommentMutation();
   const upload = async (e: React.MouseEvent<HTMLElement>) => {
     e.preventDefault();
     // @ts-ignore
@@ -59,12 +58,12 @@
     return <h1>Wait pls!</h1>;
   }
 
-  const handleImageSending = async (e:any) => {
-    e.preventDefault()
-    for(let myBlob of blobState) {
-      let blob = await fetch(myBlob).then(r => r.blob());
-      const myFile = new File([blob], 'image.jpeg', {
-        type: "image/file"
+  const handleImageSending = async (e: any) => {
+    e.preventDefault();
+    for (let myBlob of blobState) {
+      let blob = await fetch(myBlob).then((r) => r.blob());
+      const myFile = new File([blob], "image.jpeg", {
+        type: "image/file",
       });
       // @ts-ignore
       const { data } = await checkIfUserExists();
@@ -87,17 +86,22 @@
     //     }
     // }
 
-    setBlobState([])
-  }
+    setBlobState([]);
+  };
 
   return (
     <div className="bg-gray-900 text-white px-6">
       <h1 className="text-3xl text-center py-10 ">Gallery main page</h1>
-      <h1 className="text-3xl text-center py-10 text-green-600" >Uploaded images</h1>
+      <h1 className="text-3xl text-center py-10 text-green-600">
+        Uploaded images
+      </h1>
       <div className="mx-80 flex justify-center items-center gap-x-10">
-        {blobState && blobState.map( blob => {
-          return <img className="rounded-2xl w-60 h-22" src={blob} alt="asdfas"/>
-        } )}
+        {blobState &&
+          blobState.map((blob) => {
+            return (
+              <img className="rounded-2xl w-60 h-22" src={blob} alt="asdfas" />
+            );
+          })}
       </div>
       <form className="text-center my-6 mb-10 flex items-center justify-center gap-20">
         <input
@@ -106,9 +110,9 @@
           onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
             if (!e.target.files) return;
             setSelectedFile(e.target.files[0]);
-            const href = URL.createObjectURL(e.target.files[0])
+            const href = URL.createObjectURL(e.target.files[0]);
             // @ts-ignore
-            setBlobState(prev => [...prev, href])
+            setBlobState((prev) => [...prev, href]);
             // @ts-ignore
             // dispatch(
             //     addImage( {
@@ -127,7 +131,10 @@
           }}
         />
         {/*<button onClick={(e) => upload(e)}>Upload the image</button>*/}
-        <button className="bg-green-500 text-black rounded-md p-1.5 font-semibold" onClick={handleImageSending}>
+        <button
+          className="bg-green-500 text-black rounded-md p-1.5 font-semibold"
+          onClick={handleImageSending}
+        >
           Save Changes
         </button>
       </form>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"fecee879-ff70-41f2-b2bb-1844124e515e\" name=\"Changes\" comment=\"add collections linking and partial upload with live comments sending\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/client/src/components/App/App.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/client/src/components/App/App.tsx\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/client/src/components/UI/imagePlate/ImagePlate.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/client/src/components/UI/imagePlate/ImagePlate.tsx\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/client/src/features/images/imagesSlice.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/client/src/features/images/imagesSlice.ts\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/20d18410-d9bc-4c3a-995a-e62c64591538.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/31e2c10c-67a6-45a1-b8c5-c3b895a6a10c.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/392e410f-08c6-435c-85ed-a51abf559cfb.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/39a0a63d-ba4f-40d3-b1a1-4cbb1c5d5d29.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/3db48b96-85a4-4495-b045-a23f946be2b0.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/3e7bd2ef-c702-45e2-ae30-7d64830ae672.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/50d6721f-a360-4b8f-b095-b960a3940bb0.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/51138e75-9e3b-4d3d-a441-5d4ea872c708.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/6e14c9ae-416b-467d-9673-b745b589bdb5.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/87036335-9a28-4c7f-9423-88f8c1566e42.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/8b8bcddd-c93b-49f3-8eb7-f36b2f47de2a.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/8d045a62-06e5-43bc-87a2-f4d65e8b55b2.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/8db96d73-1bd2-4d68-9944-b27fb6514426.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/8fe1b408-41bf-4a22-9c04-0da3b104ea05.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/a7519635-d8d3-4957-9886-5ba52df9a653.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/a9d9ac85-66eb-45b4-ac84-b39d9f3b3e35.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/b0ba33cc-091b-4816-b1d3-7737bc030e9c.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/b12025f2-ff2e-453a-a73e-f32e99e46424.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/d4144a59-ea85-4e99-b7bb-9d3716129aab.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/d7411383-4fb5-471a-9b2b-fbed83670e2f.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/dcff2f60-8578-407b-92d0-b9adbce3335a.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/public/images/de3be481-2379-4458-b4d3-475fe6017b16.jpeg\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/src/models/image.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server/src/models/image.ts\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/src/models/user.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server/src/models/user.ts\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"godblessmeplease\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">\n    <option name=\"selectedUrlAndAccountId\">\n      <UrlAndAccount>\n        <option name=\"accountId\" value=\"152546c2-06e6-437a-b144-2aca5310809c\" />\n        <option name=\"url\" value=\"git@github.com:Dokter3228/gallery.git\" />\n      </UrlAndAccount>\n    </option>\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2KgnQQND7zwKWr5i4uteDiX3FWZ\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/home/linux/Desktop/fireoffer-monorepo&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs.jest.jest_package&quot;: &quot;/home/rootisalie/WebstormProjects/gallery/node_modules/jest&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;project.propVCSSupport.CommitDialog&quot;,\n    &quot;ts.external.directory.path&quot;: &quot;/home/linux/Desktop/gallery/client/node_modules/typescript/lib&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/client\" />\n      <recent name=\"$PROJECT_DIR$/client/src\" />\n      <recent name=\"$PROJECT_DIR$/client/public\" />\n      <recent name=\"$PROJECT_DIR$/server\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/server/src\" />\n      <recent name=\"$PROJECT_DIR$/client\" />\n      <recent name=\"$PROJECT_DIR$\" />\n      <recent name=\"$PROJECT_DIR$/client/src\" />\n      <recent name=\"$PROJECT_DIR$/client/src/components/App\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"npm.start (2)\">\n    <configuration name=\"prettier (1)\" type=\"js.build_tools.npm\" temporary=\"true\" nameIsGenerated=\"true\">\n      <package-json value=\"$PROJECT_DIR$/server/package.json\" />\n      <command value=\"run\" />\n      <scripts>\n        <script value=\"prettier\" />\n      </scripts>\n      <node-interpreter value=\"project\" />\n      <envs />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"prettier\" type=\"js.build_tools.npm\" temporary=\"true\" nameIsGenerated=\"true\">\n      <package-json value=\"$PROJECT_DIR$/client/package.json\" />\n      <command value=\"run\" />\n      <scripts>\n        <script value=\"prettier\" />\n      </scripts>\n      <node-interpreter value=\"project\" />\n      <envs />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"start (1)\" type=\"js.build_tools.npm\" temporary=\"true\" nameIsGenerated=\"true\">\n      <package-json value=\"$PROJECT_DIR$/client/package.json\" />\n      <command value=\"run\" />\n      <scripts>\n        <script value=\"start\" />\n      </scripts>\n      <node-interpreter value=\"project\" />\n      <envs />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"start (2)\" type=\"js.build_tools.npm\" temporary=\"true\" nameIsGenerated=\"true\">\n      <package-json value=\"$PROJECT_DIR$/server/package.json\" />\n      <command value=\"run\" />\n      <scripts>\n        <script value=\"start\" />\n      </scripts>\n      <node-interpreter value=\"project\" />\n      <envs />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"trystart\" type=\"js.build_tools.npm\" temporary=\"true\" nameIsGenerated=\"true\">\n      <package-json value=\"$PROJECT_DIR$/server/package.json\" />\n      <command value=\"run\" />\n      <scripts>\n        <script value=\"trystart\" />\n      </scripts>\n      <node-interpreter value=\"project\" />\n      <envs />\n      <method v=\"2\" />\n    </configuration>\n    <list>\n      <item itemvalue=\"npm.prettier\" />\n      <item itemvalue=\"npm.prettier (1)\" />\n      <item itemvalue=\"npm.trystart\" />\n      <item itemvalue=\"npm.start (1)\" />\n      <item itemvalue=\"npm.start (2)\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"npm.start (2)\" />\n        <item itemvalue=\"npm.start (1)\" />\n        <item itemvalue=\"npm.prettier (1)\" />\n        <item itemvalue=\"npm.prettier\" />\n        <item itemvalue=\"npm.trystart\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"fecee879-ff70-41f2-b2bb-1844124e515e\" name=\"Changes\" comment=\"almost completely recreated initial functionality and added inject endpoints feature\" />\n      <created>1674405077078</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1674405077078</updated>\n      <workItem from=\"1674405078381\" duration=\"416000\" />\n      <workItem from=\"1674405502438\" duration=\"146000\" />\n      <workItem from=\"1674405788551\" duration=\"2569000\" />\n      <workItem from=\"1674409428967\" duration=\"4000\" />\n      <workItem from=\"1674410907752\" duration=\"33000\" />\n      <workItem from=\"1674411225477\" duration=\"6541000\" />\n      <workItem from=\"1674421161071\" duration=\"105000\" />\n      <workItem from=\"1674491173307\" duration=\"6221000\" />\n      <workItem from=\"1674497404768\" duration=\"3993000\" />\n      <workItem from=\"1674571786683\" duration=\"4013000\" />\n      <workItem from=\"1674576343848\" duration=\"2000\" />\n      <workItem from=\"1674588763596\" duration=\"18000\" />\n      <workItem from=\"1674658769826\" duration=\"7000\" />\n      <workItem from=\"1674658806021\" duration=\"15000\" />\n      <workItem from=\"1674670569952\" duration=\"1759000\" />\n      <workItem from=\"1674674734587\" duration=\"949000\" />\n      <workItem from=\"1674750825572\" duration=\"7498000\" />\n      <workItem from=\"1674835481482\" duration=\"21000\" />\n      <workItem from=\"1674836958671\" duration=\"23000\" />\n      <workItem from=\"1674839790833\" duration=\"178000\" />\n      <workItem from=\"1674840170491\" duration=\"33000\" />\n      <workItem from=\"1674977036606\" duration=\"16000\" />\n      <workItem from=\"1674977135087\" duration=\"1610000\" />\n      <workItem from=\"1674983332344\" duration=\"23000\" />\n      <workItem from=\"1674996915907\" duration=\"1049000\" />\n      <workItem from=\"1675104669161\" duration=\"159000\" />\n      <workItem from=\"1675266780354\" duration=\"1053000\" />\n      <workItem from=\"1675275979045\" duration=\"35000\" />\n      <workItem from=\"1675442174960\" duration=\"7479000\" />\n      <workItem from=\"1675497002378\" duration=\"7132000\" />\n      <workItem from=\"1675789880136\" duration=\"3211000\" />\n      <workItem from=\"1676140424858\" duration=\"58000\" />\n      <workItem from=\"1676140487697\" duration=\"92000\" />\n      <workItem from=\"1676140601678\" duration=\"748000\" />\n      <workItem from=\"1676204702342\" duration=\"23000\" />\n      <workItem from=\"1676396532894\" duration=\"146000\" />\n      <workItem from=\"1676454823367\" duration=\"5705000\" />\n      <workItem from=\"1676462355235\" duration=\"37000\" />\n      <workItem from=\"1676709701300\" duration=\"24000\" />\n      <workItem from=\"1676709733769\" duration=\"11485000\" />\n      <workItem from=\"1676722253349\" duration=\"880000\" />\n      <workItem from=\"1676725446466\" duration=\"8895000\" />\n      <workItem from=\"1676803865640\" duration=\"16160000\" />\n      <workItem from=\"1676822483180\" duration=\"2022000\" />\n      <workItem from=\"1676973788969\" duration=\"21357000\" />\n      <workItem from=\"1677005163813\" duration=\"1187000\" />\n      <workItem from=\"1677052769725\" duration=\"13926000\" />\n      <workItem from=\"1677087966179\" duration=\"5148000\" />\n      <workItem from=\"1677097218836\" duration=\"3119000\" />\n      <workItem from=\"1677141378561\" duration=\"13743000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"fasdfas\">\n      <created>1675794331278</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1675794331278</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"basic login signin image fetching functionality\">\n      <created>1676715802864</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676715802864</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"basic image adding and fetching functionality\">\n      <created>1676733141380</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676733141380</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"refactor props, credentials state, unnecessary code\">\n      <created>1676805932069</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676805932069</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"backup\">\n      <created>1676806199952</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676806199952</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"refactor everything into typescript\">\n      <created>1676808340508</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676808340509</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"add basic Redux Toolkit setup\">\n      <created>1676810094681</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676810094681</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"add RTK Query fetching and auto-mutation\">\n      <created>1676817435228</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676817435228</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"add replace all the fetch and axios with RTK query\">\n      <created>1676821570274</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676821570274</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"test commit\">\n      <created>1676905736716</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676905736716</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"test commit\">\n      <created>1676908707435</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676908707435</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"fixed initial functionality\">\n      <created>1676915339230</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676915339230</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"almost completely recreated initial functionality and added inject endpoints feature\">\n      <created>1676918951763</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676918951763</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"add react router\">\n      <created>1676977621941</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676977621941</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"add server-side cookie handling\">\n      <created>1676978569935</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676978569935</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"add scss and max 1mb file upload\">\n      <created>1676979343784</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676979343784</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"add cookie redirect server handling fix\">\n      <created>1676987312305</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676987312305</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"create cookie controller\">\n      <created>1676987604826</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676987604826</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"refactor\">\n      <created>1676995522310</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676995522310</updated>\n    </task>\n    <task id=\"LOCAL-00020\" summary=\"add comments and authoring\">\n      <created>1677004312259</created>\n      <option name=\"number\" value=\"00020\" />\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1677004312259</updated>\n    </task>\n    <task id=\"LOCAL-00021\" summary=\"add comments mongodb model and connect it to images\">\n      <created>1677056135212</created>\n      <option name=\"number\" value=\"00021\" />\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1677056135212</updated>\n    </task>\n    <task id=\"LOCAL-00022\" summary=\"add entityAdapter and image slice\">\n      <created>1677088308356</created>\n      <option name=\"number\" value=\"00022\" />\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1677088308356</updated>\n    </task>\n    <task id=\"LOCAL-00023\" summary=\"add redux comment state\">\n      <created>1677092294722</created>\n      <option name=\"number\" value=\"00023\" />\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1677092294722</updated>\n    </task>\n    <task id=\"LOCAL-00024\" summary=\"add types(typescript)\">\n      <created>1677100302495</created>\n      <option name=\"number\" value=\"00024\" />\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1677100302495</updated>\n    </task>\n    <task id=\"LOCAL-00025\" summary=\"add local upload without server participation\">\n      <created>1677147468214</created>\n      <option name=\"number\" value=\"00025\" />\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1677147468214</updated>\n    </task>\n    <task id=\"LOCAL-00026\" summary=\"add local upload without server participation\">\n      <created>1677153170715</created>\n      <option name=\"number\" value=\"00026\" />\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1677153170715</updated>\n    </task>\n    <task id=\"LOCAL-00027\" summary=\"add collections linking and partial upload with live comments sending\">\n      <created>1677153205834</created>\n      <option name=\"number\" value=\"00027\" />\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1677153205834</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"28\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"fasdfas\" />\n    <MESSAGE value=\"basic login signin image fetching functionality\" />\n    <MESSAGE value=\"basic image adding and fetching functionality\" />\n    <MESSAGE value=\"refactor props, credentials state, unnecessary code\" />\n    <MESSAGE value=\"backup\" />\n    <MESSAGE value=\"refactor everything into typescript\" />\n    <MESSAGE value=\"add basic Redux Toolkit setup\" />\n    <MESSAGE value=\"add RTK Query fetching and auto-mutation\" />\n    <MESSAGE value=\"add replace all the fetch and axios with RTK query\" />\n    <MESSAGE value=\"test commit\" />\n    <MESSAGE value=\"fixed initial functionality\" />\n    <MESSAGE value=\"almost completely recreated initial functionality and added inject endpoints feature\" />\n    <MESSAGE value=\"add react router\" />\n    <MESSAGE value=\"add server-side cookie handling\" />\n    <MESSAGE value=\"add scss and max 1mb file upload\" />\n    <MESSAGE value=\"add cookie redirect server handling fix\" />\n    <MESSAGE value=\"create cookie controller\" />\n    <MESSAGE value=\"refactor\" />\n    <MESSAGE value=\"add comments and authoring\" />\n    <MESSAGE value=\"add comments mongodb model and connect it to images\" />\n    <MESSAGE value=\"add entityAdapter and image slice\" />\n    <MESSAGE value=\"add redux comment state\" />\n    <MESSAGE value=\"add types(typescript)\" />\n    <MESSAGE value=\"add local upload without server participation\" />\n    <MESSAGE value=\"add collections linking and partial upload with live comments sending\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"add collections linking and partial upload with live comments sending\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" type=\"javascript\">\n          <url>file://$PROJECT_DIR$/client/src/test.test.ts</url>\n          <line>116</line>\n          <option name=\"timeStamp\" value=\"1\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 76fee8448268c634078baa5bb9e07383b1384607)
+++ b/.idea/workspace.xml	(date 1677173846543)
@@ -4,35 +4,19 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="fecee879-ff70-41f2-b2bb-1844124e515e" name="Changes" comment="add collections linking and partial upload with live comments sending">
+    <list default="true" id="fecee879-ff70-41f2-b2bb-1844124e515e" name="Changes" comment="add styling">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/client/src/components/App/App.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/components/App/App.tsx" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/client/src/components/UI/imagePlate/ImagePlate.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/components/UI/imagePlate/ImagePlate.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/features/api/emptySplitApi.ts" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/features/api/emptySplitApi.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/features/api/imagesApi.ts" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/features/api/imagesApi.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/features/api/usersApi.ts" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/features/api/usersApi.ts" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/client/src/features/images/imagesSlice.ts" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/features/images/imagesSlice.ts" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/20d18410-d9bc-4c3a-995a-e62c64591538.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/31e2c10c-67a6-45a1-b8c5-c3b895a6a10c.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/392e410f-08c6-435c-85ed-a51abf559cfb.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/39a0a63d-ba4f-40d3-b1a1-4cbb1c5d5d29.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/3db48b96-85a4-4495-b045-a23f946be2b0.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/3e7bd2ef-c702-45e2-ae30-7d64830ae672.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/50d6721f-a360-4b8f-b095-b960a3940bb0.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/51138e75-9e3b-4d3d-a441-5d4ea872c708.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/6e14c9ae-416b-467d-9673-b745b589bdb5.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/87036335-9a28-4c7f-9423-88f8c1566e42.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/8b8bcddd-c93b-49f3-8eb7-f36b2f47de2a.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/8d045a62-06e5-43bc-87a2-f4d65e8b55b2.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/8db96d73-1bd2-4d68-9944-b27fb6514426.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/8fe1b408-41bf-4a22-9c04-0da3b104ea05.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/a7519635-d8d3-4957-9886-5ba52df9a653.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/a9d9ac85-66eb-45b4-ac84-b39d9f3b3e35.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/b0ba33cc-091b-4816-b1d3-7737bc030e9c.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/b12025f2-ff2e-453a-a73e-f32e99e46424.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/d4144a59-ea85-4e99-b7bb-9d3716129aab.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/d7411383-4fb5-471a-9b2b-fbed83670e2f.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/dcff2f60-8578-407b-92d0-b9adbce3335a.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/public/images/de3be481-2379-4458-b4d3-475fe6017b16.jpeg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/src/models/image.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/models/image.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/hooks.ts" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/hooks.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/index.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/index.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/controllers/imageController.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/controllers/imageController.ts" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/server/src/models/user.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/models/user.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/routes/userRoutes.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/routes/userRoutes.ts" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -82,7 +66,8 @@
     &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
     &quot;nodejs.jest.jest_package&quot;: &quot;/home/rootisalie/WebstormProjects/gallery/node_modules/jest&quot;,
     &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;project.propVCSSupport.CommitDialog&quot;,
+    &quot;prettierjs.PrettierConfiguration.Package&quot;: &quot;/home/linux/Desktop/gallery/client/node_modules/prettier&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;settings.javascript.prettier&quot;,
     &quot;ts.external.directory.path&quot;: &quot;/home/linux/Desktop/gallery/client/node_modules/typescript/lib&quot;,
     &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
@@ -102,7 +87,7 @@
       <recent name="$PROJECT_DIR$/client/src/components/App" />
     </key>
   </component>
-  <component name="RunManager" selected="npm.start (2)">
+  <component name="RunManager" selected="npm.start (1)">
     <configuration name="prettier (1)" type="js.build_tools.npm" temporary="true" nameIsGenerated="true">
       <package-json value="$PROJECT_DIR$/server/package.json" />
       <command value="run" />
@@ -162,10 +147,10 @@
     </list>
     <recent_temporary>
       <list>
-        <item itemvalue="npm.start (2)" />
         <item itemvalue="npm.start (1)" />
-        <item itemvalue="npm.prettier (1)" />
         <item itemvalue="npm.prettier" />
+        <item itemvalue="npm.start (2)" />
+        <item itemvalue="npm.prettier (1)" />
         <item itemvalue="npm.trystart" />
       </list>
     </recent_temporary>
@@ -227,7 +212,8 @@
       <workItem from="1677052769725" duration="13926000" />
       <workItem from="1677087966179" duration="5148000" />
       <workItem from="1677097218836" duration="3119000" />
-      <workItem from="1677141378561" duration="13743000" />
+      <workItem from="1677141378561" duration="16603000" />
+      <workItem from="1677169892202" duration="2239000" />
     </task>
     <task id="LOCAL-00001" summary="fasdfas">
       <created>1675794331278</created>
@@ -418,7 +404,14 @@
       <option name="project" value="LOCAL" />
       <updated>1677153205834</updated>
     </task>
-    <option name="localTasksCounter" value="28" />
+    <task id="LOCAL-00028" summary="add styling">
+      <created>1677159416529</created>
+      <option name="number" value="00028" />
+      <option name="presentableId" value="LOCAL-00028" />
+      <option name="project" value="LOCAL" />
+      <updated>1677159416529</updated>
+    </task>
+    <option name="localTasksCounter" value="29" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -436,7 +429,6 @@
     </option>
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="fasdfas" />
     <MESSAGE value="basic login signin image fetching functionality" />
     <MESSAGE value="basic image adding and fetching functionality" />
     <MESSAGE value="refactor props, credentials state, unnecessary code" />
@@ -461,7 +453,8 @@
     <MESSAGE value="add types(typescript)" />
     <MESSAGE value="add local upload without server participation" />
     <MESSAGE value="add collections linking and partial upload with live comments sending" />
-    <option name="LAST_COMMIT_MESSAGE" value="add collections linking and partial upload with live comments sending" />
+    <MESSAGE value="add styling" />
+    <option name="LAST_COMMIT_MESSAGE" value="add styling" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
Index: client/src/components/UI/imagePlate/ImagePlate.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {  useState } from \"react\";\nimport { useSetImageCommentMutation } from \"../../../features/api/imagesApi\";\nimport {Comment, Image, addComment} from \"../../../features/images/imagesSlice\";\nimport { Simulate } from \"react-dom/test-utils\";\nimport {useAppDispatch} from \"../../../hooks\";\n\ntype ImagePlateProps = {\n    img: Image,\n    key: string,\n    currentUser: string\n}\nconst ImagePlate: React.FC<ImagePlateProps> = (props) => {\n  const [comment, setComment] = useState(\"\");\n  const [setImageComment] = useSetImageCommentMutation();\n\n  const dispatch = useAppDispatch()\n  const handleCommentSending = (e: React.FormEvent) => {\n    e.preventDefault();\n    setImageComment({\n        comment,\n        author: props.currentUser,\n        uuid: props.img.uuid\n    })\n    //   dispatch(\n    //   addComment({\n    //     uuid: props.img.uuid,\n    //   // @ts-ignore\n    //     comments: [\n    //       ...props.img.comments,\n    //       {\n    //         author: props.currentUser,\n    //         text: comment,\n    //       },\n    //     ],\n    //   })\n    // );\n    setComment(\"\");\n  };\n  return (\n    <div>\n      <img className=\"rounded-2xl w-full h-52 h-22\" src={props.img.src} />\n      <h3 className=\"text-center\">\n        Author: <span className=\"font-bold \">{props.img.author}</span>\n      </h3>\n      <h3 className=\"text-center\">\n        Creation Date:{\" \"}\n        <span className=\"font-bold \">{props.img.creationDate}</span>\n      </h3>\n        <div className=\"flex justify-between items-center \">\n             <input\n                value={comment}\n                onChange={(e) => setComment(e.target.value)}\n                name=\"myInput\"\n                className=\"text-black p-1 rounded-md\"\n                type=\"text\"\n                placeholder=\"leave a comment\"\n            />\n              <button\n                onClick={handleCommentSending}\n                type=\"submit\"\n                className=\"bg-green-500 text-black rounded-md p-1 m-2 font-semibold\"\n              >\n                Send\n              </button>\n        </div>\n      <div className=\"bg-gray-50 rounded-md p-4\">\n        <h1 className=\"text-black\">Comments: </h1>\n        {props.img &&\n          props.img?.comments?.length > 0 &&\n          props.img.comments.map((comment, index) => {\n            return (\n              <div\n                key={index}\n                className=\"text-black flex justify-between mx-2 \"\n              >\n                <h1 className=\"text-2xl\">{comment.author}</h1>\n                <p>{comment.text}</p>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default ImagePlate;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/components/UI/imagePlate/ImagePlate.tsx b/client/src/components/UI/imagePlate/ImagePlate.tsx
--- a/client/src/components/UI/imagePlate/ImagePlate.tsx	(revision 76fee8448268c634078baa5bb9e07383b1384607)
+++ b/client/src/components/UI/imagePlate/ImagePlate.tsx	(date 1677173846231)
@@ -1,26 +1,30 @@
-import React, {  useState } from "react";
+import React, { useState } from "react";
 import { useSetImageCommentMutation } from "../../../features/api/imagesApi";
-import {Comment, Image, addComment} from "../../../features/images/imagesSlice";
+import {
+  Comment,
+  Image,
+  addComment,
+} from "../../../features/images/imagesSlice";
 import { Simulate } from "react-dom/test-utils";
-import {useAppDispatch} from "../../../hooks";
+import { useAppDispatch } from "../../../hooks";
 
 type ImagePlateProps = {
-    img: Image,
-    key: string,
-    currentUser: string
-}
+  img: Image;
+  key: string;
+  currentUser: string;
+};
 const ImagePlate: React.FC<ImagePlateProps> = (props) => {
   const [comment, setComment] = useState("");
   const [setImageComment] = useSetImageCommentMutation();
 
-  const dispatch = useAppDispatch()
+  const dispatch = useAppDispatch();
   const handleCommentSending = (e: React.FormEvent) => {
     e.preventDefault();
     setImageComment({
-        comment,
-        author: props.currentUser,
-        uuid: props.img.uuid
-    })
+      comment,
+      author: props.currentUser,
+      uuid: props.img.uuid,
+    });
     //   dispatch(
     //   addComment({
     //     uuid: props.img.uuid,
@@ -46,23 +50,23 @@
         Creation Date:{" "}
         <span className="font-bold ">{props.img.creationDate}</span>
       </h3>
-        <div className="flex justify-between items-center ">
-             <input
-                value={comment}
-                onChange={(e) => setComment(e.target.value)}
-                name="myInput"
-                className="text-black p-1 rounded-md"
-                type="text"
-                placeholder="leave a comment"
-            />
-              <button
-                onClick={handleCommentSending}
-                type="submit"
-                className="bg-green-500 text-black rounded-md p-1 m-2 font-semibold"
-              >
-                Send
-              </button>
-        </div>
+      <div className="flex justify-between items-center ">
+        <input
+          value={comment}
+          onChange={(e) => setComment(e.target.value)}
+          name="myInput"
+          className="text-black p-1 rounded-md"
+          type="text"
+          placeholder="leave a comment"
+        />
+        <button
+          onClick={handleCommentSending}
+          type="submit"
+          className="bg-green-500 text-black rounded-md p-1 m-2 font-semibold"
+        >
+          Send
+        </button>
+      </div>
       <div className="bg-gray-50 rounded-md p-4">
         <h1 className="text-black">Comments: </h1>
         {props.img &&
Index: client/src/hooks.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {useDispatch} from \"react-redux\";\nimport {AppDispatch} from \"./App/store\";\nexport const useAppDispatch = () => useDispatch<AppDispatch>()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/hooks.ts b/client/src/hooks.ts
--- a/client/src/hooks.ts	(revision 76fee8448268c634078baa5bb9e07383b1384607)
+++ b/client/src/hooks.ts	(date 1677173846271)
@@ -1,3 +1,3 @@
-import {useDispatch} from "react-redux";
-import {AppDispatch} from "./App/store";
-export const useAppDispatch = () => useDispatch<AppDispatch>()
\ No newline at end of file
+import { useDispatch } from "react-redux";
+import { AppDispatch } from "./App/store";
+export const useAppDispatch = () => useDispatch<AppDispatch>();
Index: server/src/models/user.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import mongoose, {Schema} from \"mongoose\";\nimport {Comment} from \"./comments\";\nimport Image from \"./image\";\n\nexport type UserType = {\n  login: string;\n  password: string\n  name?: string;\n  avatar?: string;\n  images: [string];\n  comments: [string];\n};\n\nconst userSchema = new mongoose.Schema<UserType>({\n  login: {\n    required: true,\n    type: String,\n  },\n  name: {\n    type: String\n  },\n  password: {\n    required: true,\n    type: String,\n  },\n  avatar: {\n    type: String,\n  },\n  comments: [\n    {\n      type: Schema.Types.ObjectId,\n      ref: \"Comment\",\n    },\n  ],\n  images: [\n    {\n      type: Schema.Types.ObjectId,\n      ref: \"Image\"\n    }\n  ]\n});\n\n\n\nexport default mongoose.model(\"User\", userSchema);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/models/user.ts b/server/src/models/user.ts
--- a/server/src/models/user.ts	(revision 76fee8448268c634078baa5bb9e07383b1384607)
+++ b/server/src/models/user.ts	(date 1677173846291)
@@ -1,10 +1,10 @@
-import mongoose, {Schema} from "mongoose";
-import {Comment} from "./comments";
+import mongoose, { Schema } from "mongoose";
+import { Comment } from "./comments";
 import Image from "./image";
 
 export type UserType = {
   login: string;
-  password: string
+  password: string;
   name?: string;
   avatar?: string;
   images: [string];
@@ -17,7 +17,7 @@
     type: String,
   },
   name: {
-    type: String
+    type: String,
   },
   password: {
     required: true,
@@ -35,11 +35,9 @@
   images: [
     {
       type: Schema.Types.ObjectId,
-      ref: "Image"
-    }
-  ]
+      ref: "Image",
+    },
+  ],
 });
-
-
 
 export default mongoose.model("User", userSchema);
